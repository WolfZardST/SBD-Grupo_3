USE APOYAME;

DROP PROCEDURE IF EXISTS actualizarVistaMIEMBROS_GRUPOS;
DROP PROCEDURE IF EXISTS actualizarVistaGRUPOS_TEMAS;
DROP PROCEDURE IF EXISTS actualizarVistaCATALOGOS_GRUPOS;
DROP PROCEDURE IF EXISTS actualizarVistaREUNIONES_GRUPOS;
DROP PROCEDURE IF EXISTS actualizarVistaRECURSOS_SECCIONES;

DROP PROCEDURE IF EXISTS unirUsuarioGrupo;
DROP PROCEDURE IF EXISTS eliminarUsuarioGrupo;
DROP PROCEDURE IF EXISTS buscarNicknameUsuario;
DROP PROCEDURE IF EXISTS buscarEmailUsuario;
DROP PROCEDURE IF EXISTS autenticarUsuario;
DROP PROCEDURE IF EXISTS registrarNuevoUsuario;
DROP PROCEDURE IF EXISTS nuevaEntrada;
DROP PROCEDURE IF EXISTS eliminarEntrada;
DROP PROCEDURE IF EXISTS nuevoTema;
DROP PROCEDURE IF EXISTS eliminarTema;
DROP PROCEDURE IF EXISTS mostrarCategoriasGrupos;
DROP PROCEDURE IF EXISTS mostrarGruposPorCategorias;
DROP PROCEDURE IF EXISTS buscarGrupo;
DROP PROCEDURE IF EXISTS buscarTema;
DROP PROCEDURE IF EXISTS agendarReunion;
DROP PROCEDURE IF EXISTS mostrarTodosCatalogos;
DROP PROCEDURE IF EXISTS mostrarCatalogosGrupo;
DROP PROCEDURE IF EXISTS mostrarRecursosSeccion;
DROP PROCEDURE IF EXISTS accederRecurso;
DROP PROCEDURE IF EXISTS mostrarTemasGrupos;
DROP PROCEDURE IF EXISTS mostrarTemasGrupo;
DROP PROCEDURE IF EXISTS mostrarEntradasTema;
DROP PROCEDURE IF EXISTS mostrarReunionesGrupo;

DELIMITER //

CREATE PROCEDURE actualizarVistaMIEMBROS_GRUPOS()

BEGIN
	CREATE OR REPLACE VIEW GRUPOS_MIEMBROS
	AS SELECT G.ID_GRUPO AS ID, G.NOMBRE AS GRUPO, COUNT(M.ID_USUARIO) AS PARTICIPANTES, G.CATEGORIA
	FROM GRUPO G
	LEFT JOIN MIEMBROGRUPO M
	ON G.ID_GRUPO = M.ID_GRUPO
	WHERE M.ESTADO = "ACTIVO"
	GROUP BY G.NOMBRE;
END //

DELIMITER ;

-- CALL actualizarVistaMIEMBROS_GRUPOS();

DELIMITER //

CREATE PROCEDURE actualizarVistaGRUPOS_TEMAS()

BEGIN
	CREATE OR REPLACE VIEW GRUPOS_TEMAS
	AS SELECT G.NOMBRE AS GRUPO, G.CATEGORIA, COUNT(T.ID_GRUPO) AS TEMAS
	FROM GRUPO G
	LEFT JOIN TEMA T
	ON T.ID_GRUPO = G.ID_GRUPO
	GROUP BY G.NOMBRE;
END //

DELIMITER ;

-- CALL actualizarVistaGRUPOS_TEMAS();

DELIMITER //

CREATE PROCEDURE actualizarVistaCATALOGOS_GRUPOS()

BEGIN
	CREATE OR REPLACE VIEW CATALOGOS_GRUPOS
	AS SELECT C.ID_CATALOGO AS ID, C.TITULO_SECCION AS SECCION, G.ID_GRUPO AS GRUPO, G.CATEGORIA
	FROM GRUPO G
	JOIN CATALOGO C
	ON G.ID_GRUPO = C.ID_GRUPO
	ORDER BY G.ID_GRUPO;
END //

DELIMITER ;

-- CALL actualizarVistaCATALOGOS_GRUPOS();

DELIMITER //

CREATE PROCEDURE actualizarVistaREUNIONES_GRUPOS()

BEGIN
	CREATE OR REPLACE VIEW REUNIONES_GRUPOS AS
	SELECT G.ID_GRUPO, U.NICKNAME AS ORGANIZADOR, R.ID_REUNION, 'VIRTUAL' AS TIPO, R.FECHA_HORA, R.PLATAFORMA AS PLATAFORMA_UBICACION
	FROM REUNIONVIRTUAL R
	JOIN TEMA T
	ON R.ID_TEMA = T.ID_TEMA
	JOIN GRUPO G
	ON T.ID_GRUPO = G.ID_GRUPO
	JOIN USUARIO U
	ON U.ID_USUARIO = R.ID_ORGANIZADOR
	UNION ALL
	SELECT G.ID_GRUPO, U.NICKNAME AS ORGANIZADOR, R.ID_REUNION, 'PRESENCIAL' AS TIPO, R.FECHA_HORA, R.UBICACION AS PLATAFORMA_UBICACION
	FROM REUNIONPRESENCIAL R
	JOIN TEMA T
	ON R.ID_TEMA = T.ID_TEMA
	JOIN GRUPO G
	ON T.ID_GRUPO = G.ID_GRUPO
	JOIN USUARIO U
	ON U.ID_USUARIO = R.ID_ORGANIZADOR
	ORDER BY FECHA_HORA;
END //

DELIMITER ;

-- CALL actualizarVistaREUNIONES_GRUPOS();

DELIMITER //

CREATE PROCEDURE actualizarVistaRECURSOS_SECCIONES()

BEGIN
	CREATE OR REPLACE VIEW RECURSOS_SECCIONES AS
	SELECT C.ID_CATALOGO AS ID_SECCION, 'ARTÍCULO' AS TIPO, A.ID_ARTICULO AS ID_RECURSO, A.TITULO 
	FROM CATALOGO C
	JOIN ARTICULO A
	ON C.ID_CATALOGO = A.ID_CATALOGO
	UNION ALL
	SELECT C.ID_CATALOGO AS ID_SECCION, 'VÍDEO' AS TIPO, V.ID_VIDEO AS ID_RECURSO, V.TITULO 
	FROM CATALOGO C
	JOIN VIDEO V
	ON C.ID_CATALOGO = V.ID_CATALOGO;
END //

DELIMITER ;

-- CALL actualizarVistaRECURSOS_SECCIONES();

DELIMITER //

CREATE PROCEDURE unirUsuarioGrupo(
	IN IN_ID_USUARIO TINYINT,
    IN IN_ID_GRUPO TINYINT
)

BEGIN
	
    SET @MEMBRESIA = (SELECT ID_MEMBRESIA FROM MIEMBROGRUPO 
					  WHERE ID_USUARIO = IN_ID_USUARIO 
                      AND ID_GRUPO = IN_ID_GRUPO);
	
    IF @MEMBRESIA IS NULL
    THEN 
		INSERT INTO MIEMBROGRUPO(ID_USUARIO, ID_GRUPO)
		VALUES(IN_ID_USUARIO, IN_ID_GRUPO);
    ELSE
		UPDATE MIEMBROGRUPO
        SET ESTADO = 'ACTIVO'
        WHERE ID_USUARIO = IN_ID_USUARIO 
        AND ID_GRUPO = IN_ID_GRUPO;
	END IF;
    
END //

DELIMITER ;

-- CALL unirUsuarioGrupo(1, 1);

DELIMITER //

CREATE PROCEDURE eliminarUsuarioGrupo(
	IN IN_ID_USUARIO TINYINT,
	IN IN_ID_GRUPO TINYINT
)

BEGIN
	
	UPDATE MIEMBROGRUPO
    SET ESTADO = 'INACTIVO'
    WHERE ID_USUARIO = IN_ID_USUARIO
    AND ID_GRUPO = IN_ID_GRUPO;
    
END //

DELIMITER ;

-- CALL eliminarUsuarioGrupo(1, 1);

DELIMITER //

CREATE PROCEDURE buscarNicknameUsuario(
	IN IN_NICKNAME VARCHAR(50),
	OUT OUT_PASSWORD VARCHAR(50)
)

BEGIN

	SELECT CONTRASEÑA 
    INTO OUT_PASSWORD 
	FROM USUARIO 
    WHERE NICKNAME = IN_NICKNAME;
    
END //

DELIMITER ;

/*CALL buscarNicknameUsuario("WolfZard", @pass);
SELECT @pass;*/

DELIMITER //

CREATE PROCEDURE buscarEmailUsuario(
	IN IN_EMAIL VARCHAR(50),
	OUT OUT_PASSWORD VARCHAR(50)
)

BEGIN

	SELECT CONTRASEÑA 
    INTO OUT_PASSWORD 
	FROM USUARIO 
    WHERE EMAIL = IN_EMAIL;
    
END //

DELIMITER ;

/*CALL buscarEmailUsuario("reloaded1100@gmail.com", @pass);
SELECT @pass;*/

DELIMITER //

CREATE PROCEDURE autenticarUsuario(
	IN IN_NICKNAME_OR_EMAIL VARCHAR(50),
    IN IN_PASSWORD VARCHAR(50)
)

BEGIN

	DECLARE EXPECTED_PASSWORD VARCHAR(50) DEFAULT NULL;
    
	IF IN_NICKNAME_OR_EMAIL LIKE '%@%'
    THEN
		CALL buscarEmailUsuario(IN_NICKNAME_OR_EMAIL, EXPECTED_PASSWORD);
        
        IF EXPECTED_PASSWORD IS NULL
        THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'E-mail incorrecto';
		END IF;
	ELSE
		CALL buscarNicknameUsuario(IN_NICKNAME_OR_EMAIL, EXPECTED_PASSWORD);
        
        IF EXPECTED_PASSWORD IS NULL
        THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Nickname incorrecto';
		END IF;
	END IF;
    
    IF @pass <> IN_PASSWORD
	THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Contraseña incorrecta';
	END IF;
    
END //

DELIMITER ;

/*CALL autenticarUsuario("LOREM", "IPSUM");
CALL autenticarUsuario("LOREM@gmail.com", "IPSUM");

CALL autenticarUsuario("WolfZard", "IPSUM");

CALL autenticarUsuario("reloaded1100@gmail.com", "tutankamon");
CALL autenticarUsuario("WolfZard", "tutankamon");*/

DELIMITER //

CREATE PROCEDURE registrarNuevoUsuario(
	IN IN_NICKNAME VARCHAR(50),
    IN IN_NOMBRE VARCHAR(50),
    IN IN_EMAIL VARCHAR(50),
    IN IN_CONTRASEÑA VARCHAR(50)
)

BEGIN

	CALL buscarEmailUsuario(IN_EMAIL, @pass);
    IF @pass IS NOT NULL
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'E-mail ya registrado';
	END IF;
    
    CALL buscarNicknameUsuario(IN_NICKNAME, @pass);
    IF @pass IS NOT NULL
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Alguien ya está usando este Nickname';
	END IF;
    
    INSERT INTO USUARIO(NICKNAME, NOMBRE, EMAIL, CONTRASEÑA) 
    VALUES(IN_NICKNAME, IN_NOMBRE, IN_EMAIL, IN_CONTRASEÑA);
    
END //

DELIMITER ;

/*CALL registrarNuevoUsuario("WolfZard", "Juan López", "juano@gmail.com", "eljuanes123");
CALL registrarNuevoUsuario("CapoJuan", "Juan López", "reloaded1100@gmail.com", "eljuanes123");
CALL registrarNuevoUsuario("CapoJuan", "Juan López", "juano@gmail.com", "eljuanes123");*/

DELIMITER //

CREATE PROCEDURE nuevaEntrada(
	IN IN_ID_AUTOR TINYINT,
    IN IN_ID_TEMA TINYINT,
    IN IN_TEXTO TEXT
)

BEGIN
	
    INSERT INTO ENTRADA(ID_AUTOR, ID_TEMA, TEXTO)
    VALUES(IN_ID_AUTOR, IN_ID_TEMA, IN_TEXTO);
    
END //

DELIMITER ;

-- CALL nuevaEntrada(16, 5, "Estás perdiendo de vista el objetivo principal: recuperarte");

DELIMITER //

CREATE PROCEDURE eliminarEntrada(
	IN IN_ID_ENTRADA TINYINT
)

BEGIN

	DELETE FROM ENTRADA
    WHERE ID_ENTRADA = IN_ID_ENTRADA;
    
END //

DELIMITER ;

-- CALL eliminarEntrada(4);

DELIMITER //

CREATE PROCEDURE nuevoTema(
	IN IN_NOMBRE VARCHAR(50),
    IN IN_ID_CREADOR TINYINT,
    IN IN_ID_GRUPO TINYINT
)

BEGIN

	INSERT INTO TEMA(NOMBRE, ID_CREADOR, ID_GRUPO)
    VALUES (IN_NOMBRE, IN_ID_CREADOR, IN_ID_GRUPO);
    
END //

DELIMITER ;

-- CALL nuevoTema("Mi proyecto a futuro", 12, 5);

DELIMITER //

CREATE PROCEDURE eliminarTema(
    IN IN_ID_TEMA TINYINT
)

BEGIN

	DELETE FROM TEMA
    WHERE ID_TEMA = IN_ID_TEMA;
    
END //

DELIMITER ;

-- CALL eliminarTema(26);

DELIMITER //

CREATE PROCEDURE mostrarCategoriasGrupos()

BEGIN

	SELECT DISTINCT CATEGORIA FROM GRUPO;

END //

DELIMITER ;

-- CALL mostrarCategoriasGrupos();

DELIMITER //

CREATE PROCEDURE mostrarGruposPorCategorias(
	IN CATEGORIAS VARCHAR(255)
)

BEGIN

	SELECT NOMBRE AS GRUPO
    FROM GRUPO
    WHERE FIND_IN_SET(CATEGORIA, CATEGORIAS);

END //

DELIMITER ;

/*CALL mostrarGruposPorCategorias('SUPERACIÓN');
CALL mostrarGruposPorCategorias('ABUSO,TRAUMAS');*/

DELIMITER //

CREATE PROCEDURE buscarGrupo(
	IN IN_TXT_FIELD VARCHAR(255),
    IN IN_MIN_USUARIOS INT,
    IN IN_CATEGORIAS VARCHAR(255)
)

BEGIN
	
    CALL actualizarVistaMIEMBROS_GRUPOS();
    
    IF IN_CATEGORIAS = ''
    THEN
		SELECT GRUPO, PARTICIPANTES
        FROM GRUPOS_MIEMBROS
        WHERE GRUPO LIKE CONCAT('%',IN_TXT_FIELD,'%')
        OR CATEGORIA LIKE CONCAT('%',IN_TXT_FIELD,'%')
        GROUP BY GRUPO
        HAVING PARTICIPANTES >= IN_MIN_USUARIOS
        ORDER BY PARTICIPANTES;
    ELSE
		SELECT GRUPO, PARTICIPANTES
        FROM GRUPOS_MIEMBROS
        WHERE GRUPO LIKE CONCAT('%',IN_TXT_FIELD,'%')
        AND FIND_IN_SET(CATEGORIA, IN_CATEGORIAS)
        GROUP BY GRUPO
        HAVING PARTICIPANTES >= IN_MIN_USUARIOS
        ORDER BY PARTICIPANTES;
	END IF;
    
END //

DELIMITER ;

/*CALL buscarGrupo('At', 0, '');
CALL buscarGrupo('Explor', 0, '');
CALL buscarGrupo('b', 0, 'SUPERACIÓN,TRAUMAS');*/

DELIMITER //

CREATE PROCEDURE buscarTema(
	IN IN_ID_GRUPO TINYINT,
    IN IN_TXT_FIELD VARCHAR(255),
    IN IN_MIN_ENTRADAS INT
)

BEGIN

	SELECT NOMBRE AS TEMA, NUM_ENTRADAS
    FROM TEMA
    WHERE NOMBRE LIKE CONCAT('%',IN_TXT_FIELD,'%')
    AND NUM_ENTRADAS >= IN_MIN_ENTRADAS
    AND ID_GRUPO = IN_ID_GRUPO
    ORDER BY NUM_ENTRADAS;

END //

DELIMITER ;

-- CALL buscarTema(12, 'estaba', 0);

DELIMITER //

CREATE PROCEDURE agendarReunion(
	IN IN_ID_ORGANIZADOR TINYINT,
	IN IN_ID_TEMA TINYINT,
    IN IN_FECHA_HORA DATETIME,
    IN MODALIDAD VARCHAR(20),
    IN PLATAFORMA_UBICACION VARCHAR(50)
)

BEGIN

	CASE
		WHEN MODALIDAD = 'VIRTUAL'
        THEN
			INSERT INTO REUNIONVIRTUAL(ID_ORGANIZADOR, ID_TEMA, FECHA_HORA, PLATAFORMA)
            VALUES(IN_ID_ORGANIZADOR, IN_ID_TEMA, IN_FECHA_HORA, PLATAFORMA_UBICACION);
		WHEN MODALIDAD = 'PRESENCIAL'
        THEN
			INSERT INTO REUNIONPRESENCIAL(ID_ORGANIZADOR, ID_TEMA, FECHA_HORA, UBICACION)
            VALUES(IN_ID_ORGANIZADOR, IN_ID_TEMA, IN_FECHA_HORA, PLATAFORMA_UBICACION);
	END CASE;
    
END //

DELIMITER ;

/*CALL agendarReunion(4, 5, '2022-01-30 15:00:00', 'VIRTUAL', 'ZOOM');
CALL agendarReunion(2, 9, '2022-02-14 19:30:00', 'PRESENCIAL', 'Milagro');*/

DELIMITER //

CREATE PROCEDURE mostrarTodosCatalogos()

BEGIN
	CALL actualizarVistaCATALOGOS_GRUPOS();
	SELECT * FROM CATALOGOS_GRUPOS;
END //

DELIMITER ;

-- CALL mostrarTodosCatalogos();

DELIMITER //

CREATE PROCEDURE mostrarCatalogosGrupo(
	IN IN_ID_GRUPO TINYINT
)

BEGIN
	CALL actualizarVistaCATALOGOS_GRUPOS();

	SELECT ID, SECCION 
    FROM CATALOGOS_GRUPOS
    WHERE GRUPO = IN_ID_GRUPO;
END //

DELIMITER ;

-- CALL mostrarCatalogosGrupo(25);

DELIMITER //

CREATE PROCEDURE mostrarRecursosSeccion(
	IN IN_ID_SECCION TINYINT
)

BEGIN
	CALL actualizarVistaRECURSOS_SECCIONES();

	SELECT ID_RECURSO, TITULO, TIPO
    FROM RECURSOS_SECCIONES
    WHERE ID_SECCION = IN_ID_SECCION;
END //

DELIMITER ;

-- CALL mostrarRecursosSeccion(5);

DELIMITER //

CREATE PROCEDURE accederRecurso(
	IN IN_ID_RECURSO TINYINT,
    IN IN_TIPO VARCHAR(8)
)

BEGIN
	CASE
		WHEN IN_TIPO = 'ARTÍCULO'
        THEN
			SELECT TITULO, TEXTO
            FROM ARTICULO
            WHERE IN_ID_RECURSO = ID_ARTICULO;
		WHEN IN_TIPO = 'VÍDEO'
        THEN
			SELECT TITULO, URL
            FROM VIDEO
            WHERE IN_ID_RECURSO = ID_VIDEO;
	END CASE;
END //

DELIMITER ;

/*CALL accederRecurso(5, 'VÍDEO');
CALL accederRecurso(5, 'ARTÍCULO');*/

DELIMITER //

CREATE PROCEDURE mostrarTemasGrupos()

BEGIN
	CALL actualizarVistaGRUPOS_TEMAS();
	SELECT GRUPO, TEMAS FROM GRUPOS_TEMAS;
END //

DELIMITER ;

-- CALL mostrarTemasGrupos();

DELIMITER //

CREATE PROCEDURE mostrarTemasGrupo(
	IN IN_ID_GRUPO TINYINT
)

BEGIN
	SELECT NOMBRE AS TEMA, F_CREACION, NUM_ENTRADAS AS ENTRADAS
    FROM TEMA
    WHERE ID_GRUPO = IN_ID_GRUPO
    ORDER BY F_CREACION;
END //

DELIMITER ;

-- CALL mostrarTemasGrupo(7);

DELIMITER //

CREATE PROCEDURE mostrarEntradasTema(
	IN IN_ID_TEMA TINYINT
)

BEGIN
	SELECT NICKNAME AS AUTOR, TEXTO, FECHA_HORA
    FROM ENTRADA
    JOIN USUARIO
    ON ID_AUTOR = ID_USUARIO
    WHERE ID_TEMA = IN_ID_TEMA
    ORDER BY FECHA_HORA;
END //

DELIMITER ;

-- CALL mostrarEntradasTema(7);

DELIMITER //

CREATE PROCEDURE mostrarReunionesGrupo(
	IN IN_ID_GRUPO TINYINT
)

BEGIN
	CALL actualizarVistaREUNIONES_GRUPOS();

	SELECT ORGANIZADOR, FECHA_HORA, TIPO, PLATAFORMA_UBICACION 
    FROM REUNIONES_GRUPOS
    WHERE ID_GRUPO = IN_ID_GRUPO;
END //

DELIMITER ;

-- CALL mostrarReunionesGrupo(18);